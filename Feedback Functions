{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52e7723e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing utility modules\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers, regularizers, optimizers\n",
    "from tensorflow.keras.layers import Input, Conv2D, ReLU, BatchNormalization,\\\n",
    "                                    Add, AveragePooling2D, MaxPooling2D, Flatten, Dense, Dropout\n",
    "from tensorflow.keras.regularizers import l1, l2\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau\n",
    "from tensorflow.keras.callbacks import Callback\n",
    "from tensorflow import Tensor\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "from tensorflow.keras.initializers import glorot_uniform\n",
    "from tensorflow.keras.initializers import he_normal\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "import sklearn\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "\n",
    "import datetime\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#import sklearn\n",
    "#from sklearn.metrics import confusion_matrix\n",
    "import math\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    " \n",
    "# importing machine learning models for prediction\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import xgboost as xgb\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "num_classes=4\n",
    "\n",
    "x_train = np.load('x_train.npy')\n",
    "y_train = np.load('y_train.npy')\n",
    "x_test = np.load('x2_test.npy')\n",
    "y_test = np.load('y2_test.npy')\n",
    "\n",
    "#y_train = keras.utils.to_categorical(y_train, num_classes)\n",
    "#y_test = keras.utils.to_categorical(y_test, num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2c7811d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#flip data across x\n",
    "\"\"\"\n",
    "0 - left shoulder (right for viewer)\n",
    "1 - right shoulder (left for viewer)\n",
    "2 - left elbow (right for viewer)\n",
    "3 - right elbow (left for viewer)\n",
    "4 - left wrist (right for viewer)\n",
    "5 - right wrist (left for viewer)\n",
    "6 - left hip (right for viewer)\n",
    "7 - right hip (left for viewer)\n",
    "8 - left knee (right for viewer)\n",
    "9 - right knee (left for viewer)\n",
    "10 - left ankle (right for viewer)\n",
    "11 - right ankle (left for viewer)\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8e5433e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def angle3pt(a, b, c):\n",
    "    \"\"\"Counterclockwise angle in degrees by turning from a to c around b\n",
    "        Returns a float between 0.0 and 360.0\"\"\"\n",
    "    ang = math.degrees(\n",
    "        math.atan2(c[1]-b[1], c[0]-b[0]) - math.atan2(a[1]-b[1], a[0]-b[0]))\n",
    "    return ang + 360 if ang < 0 else ang\n",
    " \n",
    "x = x_train[0][0]\n",
    "\n",
    "class dive:\n",
    "    def hips(data):\n",
    "        print(data[6][1])\n",
    "        return 0 if min(data[5][1], data[6][1]) <= min(data[0][1], data[1][1]) else 1\n",
    "    def kneeAngle(data):\n",
    "        return 0 if (90 < angle3pt(data[10], data[8], data[6]) < 270) or (90 < angle3pt(data[11], data[9], data[7]) < 270) else 1\n",
    "\n",
    "#dive.legAngle(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2456675c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class underwater:\n",
    "    def legsTogether(data):\n",
    "        return 0 if not ((30 < angle3pt(data[8], data[6], data[9]) < 330) or (30 < angle3pt(data[8], data[7], data[9]) < 330)) else 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5680f97",
   "metadata": {},
   "outputs": [],
   "source": [
    "class freestyle:\n",
    "    def elbowDrop(data):\n",
    "        return 0 if not ((60 < angle3pt(data[10], data[8], data[6]) < 300) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n",
    "    def kneeAngle(data):\n",
    "        #looks at the angle of the knee, from hip to knee to ankle\n",
    "        return 0 if ((70 < angle3pt(data[6], data[8], data[10]) < 290) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n",
    "    def sinkHip(data):\n",
    "        #looks at angle of shoulder to hip to knee to check if hips are sinking too low in water\n",
    "        return 0 if not ((130 < angle3pt(data[0], data[6], data[8] < 230)) or (130 < angle3pt(data[1], data[7], data[9]) < 230)) else 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40fa21be",
   "metadata": {},
   "outputs": [],
   "source": [
    "class backstroke:\n",
    "    def kneeAngle(data):\n",
    "        return 0 if ((70 < angle3pt(data[6], data[8], data[10]) < 290) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n",
    "    def sinkHip(data):\n",
    "        return 0 if not ((130 < angle3pt(data[0], data[6], data[8] < 230)) or (130 < angle3pt(data[1], data[7], data[9]) < 230)) else 1\n",
    "    def straightArm(data):\n",
    "        return 1 if ((170 < angle3pt(data[0], data[2], data[4]) < 190) or (170 < angle3pt(data[1], data[3], data[5]) < 190)) else  0 \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abb3f7d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "class butterfly:\n",
    "    def elbowDrop(data):\n",
    "        return 0 if not ((60 < angle3pt(data[10], data[8], data[6]) < 300) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n",
    "    def kickAngle(data):\n",
    "        return 0 if ((70 < angle3pt(data[6], data[8], data[10]) < 290) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n",
    "    def chestDown(data):\n",
    "        return 0 if min(data[0][1], data[1][1]) < min(data[6][1], data[7][1]) else 1\n",
    "    def legsTogether(data):\n",
    "        return 0 if not ((30 < angle3pt(data[8], data[6], data[9]) < 330) or (30 < angle3pt(data[8], data[7], data[9]) < 330)) else 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55d4752d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class breastroke\n",
    "    def noKick(data):\n",
    "        return 0 if ((70 < angle3pt(data[6], data[8], data[10]) < 290) or (90 < angle3pt(data[11], data[9], data[7]) < 270)) else 1\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (GPU)",
   "language": "python",
   "name": "tf-gpu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
